public class ThreadCommunicationExample {
    public static void main(String[] args) {
       Message message = new Message();
       Thread senderThread = new SenderThread(message);
       Thread receiverThread = new ReceiverThread(message);
       senderThread.start();
       receiverThread.start();
    }
 }
 
 class Message {
    private String message;
    private boolean empty = true;
 
    public synchronized String read() {
       while (empty) {
          try {
             wait();
          } catch (InterruptedException e) {}
       }
       empty = true;
       notifyAll();
       return message;
    }
 
    public synchronized void write(String message) {
       while (!empty) {
          try {
             wait();
          } catch (InterruptedException e) {}
       }
       empty = false;
       this.message = message;
       notifyAll();
    }
 }
 
 class SenderThread extends Thread {
    private Message message;
 
    public SenderThread(Message message) {
       this.message = message;
    }
 
    public void run() {
       String[] messages = {"Hello", "World", "How", "Are", "You"};
       for (String message : messages) {
          this.message.write(message);
          try {
             Thread.sleep(1000);
          } catch (InterruptedException e) {}
       }
       this.message.write("DONE");
    }
 }
 
 class ReceiverThread extends Thread {
    private Message message;
 
    public ReceiverThread(Message message) {
       this.message = message;
    }
 
    public void run() {
       while (true) {
          String message = this.message.read();
          if (message.equals("DONE")) {
             break;
          }
          System.out.println("Received message: " + message);
       }
    }
 }
 